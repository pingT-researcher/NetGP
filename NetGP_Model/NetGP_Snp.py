import torch.nn as nn
from SparseConnectedModule import SparseConnectedModule

# Define a neural network model class named NetGS, which inherits from nn.Module.
# This class is used to build a specific structured neural network for processing relevant data and generating outputs.
class NetGP(nn.Module):
    def __init__(self, genes_mask,other=''):
        """
        Initialization function for creating an instance of the NetGS model and initializing each layer of the model
        and its related parameters.
        Parameters: - genes_mask: Gene-related mask  -other:No use, just for formatting
        """
        super(NetGP, self).__init__()
        self.genes_mask = genes_mask.to('cuda:0')
        # Create an instance of the SparseConnectedModule using the gene-related mask as an argument.
        self.snp_lin = SparseConnectedModule(self.genes_mask)
        self.BN_G = nn.BatchNorm1d(len(genes_mask))
        m = int(len(genes_mask))
        self.pathway_lin = nn.Linear(m, 64)
        # Create another one-dimensional batch normalization layer for the output of the pathway_lin layer.
        # Normalizing the features after the linear transformation helps in improving the training stability and
        # performance.
        self.BN_P = nn.BatchNorm1d(64)
        self.lin = nn.Linear(64, 1)
        self.relu = nn.ReLU()

    def forward(self, datas, transcribe):
        """
        Forward propagation function that defines the flow of data through the NetGS model.

        Parameters:
        - datas: SNP data
        - transcribe: Transcription data
        Returns:
        - out: The final output of the model after passing through all the defined layers and operations.
               It's a single value representing the prediction or result generated by the model for the given inputs.
        """
        snp_out = self.snp_lin(datas)
        snp_out = self.relu(snp_out)
        pathway_out = self.pathway_lin(snp_out)
        pathway_out = self.relu(pathway_out)
        pathway_out = self.BN_P(pathway_out)
        out = self.relu(self.lin(pathway_out))
        return out
